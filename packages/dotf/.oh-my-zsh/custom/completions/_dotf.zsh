# dotf completion                                          -*- shell-script -*-

# This bash completions script was generated by
# completely (https://github.com/dannyben/completely)
# Modifying it manually is not recommended

_dotf_completions_filter() {
    local words="$1"
    local cur=${COMP_WORDS[COMP_CWORD]}
    local result=()

    if [[ "${cur:0:1}" == "-" ]]; then
        echo "$words"

    else
        for word in $words; do
            [[ "${word:0:1}" != "-" ]] && result+=("$word")
        done

        echo "${result[*]}"

    fi
}

_dotf_completions() {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")
    local compline="${compwords[*]}"

    case "$compline" in
        'layout sync'*)
            while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotf_completions_filter "--dry-run --help --layout --source -h -n -s")" -- "$cur")
            ;;

        'layout git'*)
            while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotf_completions_filter "--dry-run --help --layout --max-depth --output -h -n -o")" -- "$cur")
            ;;

        'layout'*)
            while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotf_completions_filter "--help -h git sync")" -- "$cur")
            ;;

        *)
            while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_dotf_completions_filter "--help --version -h -v layout")" -- "$cur")
            ;;

    esac
} \
    && complete -F _dotf_completions dotf

# ex: filetype=sh
